name: Publish to Nexus maven.vps.rodrigor.com

on:
  release:
    types: [ published ]

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>projetos</id>  <!-- Certifique-se que o ID é igual ao pom.xml -->
                      <username>${{ secrets.NEXUS_USERNAME }}</username>
                      <password>${{ secrets.NEXUS_PASSWORD }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      # Etapa: Verificar e atualizar o arquivo resources/VERSION se necessário
      - name: Update VERSION file if necessary
        id: update-version
        run: |
          TAG_NAME="${{ github.ref_name }}"
          TAG_NAME=$(echo "$TAG_NAME" | tr -d '[:space:]')  # Remove espaços em branco da tag
          VERSION_FILE="src/main/resources/VERSION"
          if [ ! -f "$VERSION_FILE" ]; then
            echo "# This file is auto-generated. Do not update manually." > "$VERSION_FILE"
            echo "$TAG_NAME" >> "$VERSION_FILE"
            UPDATED=true
          else
            CURRENT_VERSION=$(grep -v '^[#]' "$VERSION_FILE" | tr -d '\n')
            if [ "$CURRENT_VERSION" != "$TAG_NAME" ]; then
              CONTENT=$(grep '^[#]' "$VERSION_FILE")
              echo "$CONTENT" > "$VERSION_FILE"
              echo "$TAG_NAME" >> "$VERSION_FILE"
              UPDATED=true
            else
              UPDATED=false
            fi
          fi
          echo "UPDATED=$UPDATED" >> $GITHUB_ENV

        # Etapa: Commit da alteração no VERSION somente se foi atualizado
#      - name: Commit updated VERSION file if necessary
#        if: env.UPDATED == 'true'
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#      
#          # Atualiza a branch local com as mudanças remotas para evitar conflitos
#          git pull --rebase origin main
#
#          git add src/main/resources/VERSION
#          git commit -m "Github Action: atualiza resources/VERSION automaticamente: ${{ github.ref_name }}"
#
#          # Configura a URL remota com autenticação usando o GITHUB_TOKEN
#          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
#      
#          # Envia as mudanças para a branch main
#          git push origin HEAD:main
# -------------------------------------
      - name: COMMIT - Configura usuário Git
        if: env.UPDATED == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: COMMIT - Verificar branch e estado atual do repositório
        if: env.UPDATED == 'true'
        run: |
          git branch -a
          git status

      - name: COMMIT - Adicionar arquivo VERSION ao commit
        if: env.UPDATED == 'true'
        run: |
          git add src/main/resources/VERSION
          git status  # Verifica se o arquivo foi realmente adicionado

      - name: COMMIT - Atualizar as últimas alterações da branch main (git pull)
        if: env.UPDATED == 'true'
        run: |
          git pull --rebase origin main

      - name: COMMIT - Verificar status após o pull
        if: env.UPDATED == 'true'
        run: |
          git status

      - name: COMMIT - Fazer commit da mudança
        if: env.UPDATED == 'true'
        run: |
          git commit -m "Github Action: atualiza resources/VERSION automaticamente: ${{ github.ref_name }}"

      - name: COMMIT - Verificar status após commit
        if: env.UPDATED == 'true'
        run: |
          git log -1
          git status

      - name: COMMIT - Configura URL remota
        if: env.UPDATED == 'true'
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git remote -v  # Verificar se o URL remoto foi configurado corretamente

      - name: COMMIT - Puxar novamente antes de empurrar (git pull --rebase)
        if: env.UPDATED == 'true'
        run: |
          git pull --rebase origin main
          git status

      - name: COMMIT - Enviar as mudanças para o repositório (git push)
        if: env.UPDATED == 'true'
        run: |
          git push origin HEAD:main

# -------------------------------------





      - name: Check version type (Snapshot or Release)
        id: version-check
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | tr -d '[:space:]')
          echo "Project version: '$VERSION'"
          if [[ "$VERSION" = *-SNAPSHOT ]]; then
            echo "is-snapshot=true" >> $GITHUB_OUTPUT
          else
            echo "is-snapshot=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Nexus
        run: |
          if [ "${{ steps.version-check.outputs.is-snapshot }}" == "true" ]; then
            echo "Deploying Snapshot without source and javadoc"
            mvn clean deploy -P snapshot -Dsource.skip=true -Djavadoc.skip=true
          else
            echo "Deploying Release without source and javadoc"
            mvn clean deploy -P release -Dsource.skip=true -Djavadoc.skip=true
          fi
