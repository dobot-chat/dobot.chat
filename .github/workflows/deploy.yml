name: Publish to Nexus maven.vps.rodrigor.com

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Set up Maven settings
        run: |
          mkdir -p ~/.m2
          echo "<settings>
                  <servers>
                    <server>
                      <id>projetos</id>  <!-- Certifique-se que o ID é igual ao pom.xml -->
                      <username>${{ secrets.NEXUS_USERNAME }}</username>
                      <password>${{ secrets.NEXUS_PASSWORD }}</password>
                    </server>
                  </servers>
                </settings>" > ~/.m2/settings.xml

      # Etapa: Verificar e atualizar o POM.xml se necessário
      - name: Update POM version if necessary
        run: |
          TAG_NAME="${{ github.ref_name }}"  # Obtém a tag da referência
          echo "Tag name from GitHub: $TAG_NAME"

          # Obtém a versão atual do pom.xml usando grep e sed
          CURRENT_VERSION=$(grep -m 1 '<version>' pom.xml | sed 's/.*<version>\(.*\)<\/version>.*/\1/')
          echo "Current POM version: $CURRENT_VERSION"

          # Verifica se a versão do POM já é igual à tag
          if [ "$CURRENT_VERSION" != "$TAG_NAME" ]; then
            echo "Updating POM version to $TAG_NAME"
            sed -i '0,/<version>/{s/<version>.*<\/version>/<version>'"$TAG_NAME"'<\/version>/}' pom.xml
            UPDATED=true
          else
            echo "POM version is already $TAG_NAME, no update necessary."
            UPDATED=false
          fi

      # Etapa: Commit da alteração no pom.xml somente se foi atualizado
      - name: Commit updated POM version if necessary
        if: steps.Update_POM_version_if_necessary.outputs.UPDATED == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add pom.xml
          git commit -m "Github Action: Atualiza versão do POM automaticamente: ${{ github.ref_name }}"
    
          # Configura a URL remota com autenticação usando o GITHUB_TOKEN
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
    
          # Empurre as mudanças de volta para a branch correta
          git push origin HEAD:main  # Substitua 'main' pela sua branch principal, se necessário

      - name: Check version type (Snapshot or Release)
        id: version-check
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Project version: $VERSION"
          if [[ "$VERSION" == *-SNAPSHOT ]]; then
            echo "is-snapshot=true" >> $GITHUB_OUTPUT
          else
            echo "is-snapshot=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Nexus
        run: |
          if [ "${{ steps.version-check.outputs.is-snapshot }}" == "true" ]; then
            echo "Deploying Snapshot without source and javadoc"
            mvn clean deploy -P snapshot -Dsource.skip=true -Djavadoc.skip=true
          else
            echo "Deploying Release without source and javadoc"
            mvn clean deploy -P release -Dsource.skip=true -Djavadoc.skip=true
          fi
